<?xml version='1.0' encoding='iso-8859-1' ?>
<documents><document>
<title>AIR: Adaptive Dynamic Precision Iterative Refinement</title>
<publication-date>2012-08-01T00:00:00-07:00</publication-date>
<state>published</state>
<authors>
<author>
<email>jlee57@utk.edu</email>
<lname>Lee</lname>
<fname>Jun Kyu</fname>
</author>
</authors>
<keywords>
<keyword>iterative refinement</keyword>
<keyword>precision</keyword>
<keyword>FPGA</keyword>
</keywords>
<disciplines><discipline>Digital Circuits</discipline>
</disciplines><abstract>&lt;p&gt;In high performance computing, applications often require very accurate solutions while minimizing runtimes and power consumption. Improving the ratio of the number of logic gates implementing floating point arithmetic operations to the total number of logic gates enables greater efficiency, potentially with higher performance and lower power consumption. Software executing on the fixed hardware in Von-Neuman architectures faces limitations on improving this ratio, since processors require extensive supporting logic to fetch and decode instructions while employing arithmetic units with statically defined precision. This dissertation explores novel approaches to improve computing architectures for linear system applications not only by designing application-specific hardware but also by optimizing precision by applying adaptive dynamic precision iterative refinement (AIR). This dissertation shows that AIR is numerically stable and well behaved. Theoretically, AIR can produce up to 3 times speedup over mixed precision iterative refinement on FPGAs. Implementing an AIR prototype for the refinement procedure on a Xilinx XC6VSX475T FPGA results in an estimated around 0.5, 8, and 2 times improvement for the time-, clock-, and energy-based performance per iteration compared to mixed precision iterative refinement on the Nvidia Tesla C2075 GPU, when a user requires a prescribed accuracy between single and double precision. AIR using FPGAs can produce beyond double precision accuracy effectively, while CPUs or GPUs need software help causing substantial overhead.&lt;/p&gt;</abstract>
<coverpage-url>https://trace.tennessee.edu/utk_graddiss/1446</coverpage-url>
<fulltext-url>https://trace.tennessee.edu/cgi/viewcontent.cgi?article=2671&amp;amp;context=utk_graddiss&amp;amp;unstamped=1</fulltext-url>
<label>1446</label>
<document-type>dissertation</document-type>
<type>article</type>
<articleid>2671</articleid>
<submission-date>2012-07-31T15:48:10-07:00</submission-date>
<publication-title>Doctoral Dissertations</publication-title>
<context-key>3164697</context-key>
<submission-path>utk_graddiss/1446</submission-path>
<fields>
<field name="advisor1" type="string">
<value>Gregory D. Peterson</value>
</field>
<field name="advisor2" type="string">
<value>Itamar Arel, Robert J. Hinde, Robert J. Harrison</value>
</field>
<field name="degree_name" type="string">
<value>Doctor of Philosophy</value>
</field>
<field name="department" type="string">
<value>Computer Engineering</value>
</field>
<field name="instruct" type="string">
<value>1</value>
</field>
<field name="publication_date" type="date">
<value>2012-08-01T00:00:00-07:00</value>
</field>
</fields>
</document>
</documents>