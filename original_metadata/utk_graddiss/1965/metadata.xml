<?xml version='1.0' encoding='iso-8859-1' ?>
<documents><document>
<title>Management of Requirements Changes in Sequence-Based Software Specifications</title>
<publication-date>2006-12-01T00:00:00-08:00</publication-date>
<state>published</state>
<authors>
<author>
<institution>University of Tennessee - Knoxville</institution>
<lname>Lin</lname>
<fname>Lan</fname>
</author>
</authors>
<disciplines><discipline>Computer Sciences</discipline>
</disciplines><abstract>&lt;p&gt;The sequence-based software specification method was developed to convert ordinary, or typical requirements and requirements statements into mathematically precise specifications, at an acceptable level of abstraction, for deterministic systems. In view of the iterative nature of modern software developing process, requirements, once defined, are not frozen; changes are integrated continuously that need to be accommodated and validated.&lt;/p&gt;
&lt;p&gt;The need for managing changes of requirements in sequence-based specifications arises both as a consequence of practicing this method and as a general topic in software requirements engineering. In this research we have explored the theoretical consequences of three major requirements changes in sequence-based specifications: stimulus changes, response changes, and equivalence changes, as well as ways to manage these changes that lead to automated tool support. Our solution is dedicated to maintaining and evolving old specifications, while working at the lowest level dealing with atomic changes one at a time, and keeping the specifier informed of portions of the current enumeration that may need further consideration.&lt;/p&gt;
&lt;p&gt;Theoretical analysis of the consequences of requirements changes are performed with the aid of an axiomatic system for the sequence-based specification method to ensure mathematical soundness and in-depth understanding of the model. Most results are provable (and proved) by correct formalization and application of axioms.&lt;/p&gt;
&lt;p&gt;We have also proposed a transformation theory that relates an enumeration to other formal representations of a software program. Algorithms are provided for direct transformations among enumerations, state machines, regular expression sets, and prefix-recursive function sets. Enumeration minimization and compatibility are addressed as part of the transformation theory. Finally a safe controller example is demonstrated in great detail with respect to abstraction, enumeration, transformations from an enumeration, and requirements changes.&lt;/p&gt;</abstract>
<coverpage-url>https://trace.tennessee.edu/utk_graddiss/1965</coverpage-url>
<fulltext-url>https://trace.tennessee.edu/cgi/viewcontent.cgi?article=3396&amp;amp;context=utk_graddiss&amp;amp;unstamped=1</fulltext-url>
<label>1965</label>
<document-type>dissertation</document-type>
<type>article</type>
<articleid>3396</articleid>
<submission-date>2013-09-20T09:30:57-07:00</submission-date>
<publication-title>Doctoral Dissertations</publication-title>
<context-key>4608619</context-key>
<submission-path>utk_graddiss/1965</submission-path>
<fields>
<field name="advisor1" type="string">
<value>Jesse H. Poore</value>
</field>
<field name="advisor2" type="string">
<value>Stacy J. Prowell, Michael D. Vose, Lynne E. Parker, Ken Stephenson</value>
</field>
<field name="degree_name" type="string">
<value>Doctor of Philosophy</value>
</field>
<field name="department" type="string">
<value>Computer Science</value>
</field>
<field name="embargo_date" type="date">
<value>2006-12-01T00:00:00-08:00</value>
</field>
<field name="publication_date" type="date">
<value>2006-12-01T00:00:00-08:00</value>
</field>
</fields>
</document>
</documents>