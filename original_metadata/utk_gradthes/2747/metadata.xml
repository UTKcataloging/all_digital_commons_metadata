<?xml version='1.0' encoding='iso-8859-1' ?>
<documents><document>
<title>Graphics Processing Unit Bloom Filters: Classical and Probabilistic</title>
<publication-date>2014-05-01T00:00:00-07:00</publication-date>
<state>published</state>
<authors>
<author>
<email>jpyle1@utk.edu</email>
<institution>University of Tennessee - Knoxville</institution>
<lname>Pyle</lname>
<fname>Joshua</fname>
<mname>Michael</mname>
</author>
</authors>
<keywords>
<keyword>GPU</keyword>
<keyword>BLOOM FILTER</keyword>
<keyword>CUDA</keyword>
</keywords>
<disciplines><discipline>Computational Engineering</discipline>
</disciplines><abstract>&lt;p&gt;Graphics Processing Units (GPUs) have been used to enhance the speed and efficiency of both data structures and algorithms alike. A common data structure used in Computer Science is the Bloom Filter, which is used in many types of applications including databases and security logging. The Bloom Filter is a lossy data structure that uses several hash functions to store keys into a bit array. A novel, new Bloom Filter meant for use in internet traffic detection called the Probabilistic Bloom Filter has recently been developed. In practice, this new Bloom Filter typically makes use of more hash functions than its classical counterpart. Because both of these data structures contain information that can be inserted in independent batch operations, this makes each data structure a prime target to be parallelized on a Graphics Processing Unit. This paper develops a scalable, optimized Graphics Processing Unit implementation of the classical and Probabilistic Bloom Filters. The results of processing the Bloom Filter on the Graphics Processing Unit (GPU) are compared to processing the same Bloom Filter on the Central Processing Unit (CPU). By processing the data structures on Graphics Processing Units, a substantial decrease in processing time was observed and recorded. For most cases, the decrease in time was linearly proportional to the number of keys inserted and the number of hash functions used.&lt;/p&gt;</abstract>
<coverpage-url>https://trace.tennessee.edu/utk_gradthes/2747</coverpage-url>
<fulltext-url>https://trace.tennessee.edu/cgi/viewcontent.cgi?article=4031&amp;amp;context=utk_gradthes&amp;amp;unstamped=1</fulltext-url>
<label>2747</label>
<document-type>thesis</document-type>
<type>article</type>
<articleid>4031</articleid>
<submission-date>2014-03-07T04:49:40-08:00</submission-date>
<publication-title>Masters Theses</publication-title>
<context-key>5288560</context-key>
<submission-path>utk_gradthes/2747</submission-path>
<fields>
<field name="advisor1" type="string">
<value>Qing Cao</value>
</field>
<field name="advisor2" type="string">
<value>Michael Thomason, Michael Berry</value>
</field>
<field name="degree_name" type="string">
<value>Master of Science</value>
</field>
<field name="department" type="string">
<value>Computer Science</value>
</field>
<field name="embargo_date" type="date">
<value>2011-01-01T00:00:00-08:00</value>
</field>
<field name="instruct" type="string">
<value>1</value>
</field>
<field name="publication_date" type="date">
<value>2014-05-01T00:00:00-07:00</value>
</field>
</fields>
</document>
</documents>